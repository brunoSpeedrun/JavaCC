options {
  STATIC = false ;
}

PARSER_BEGIN(Parser)

/**
*===================================================================================
* Parser : A syntactic analyzer for a fictitious EST language.
*===================================================================================
*
* (C) Copyright 2016 by Mosaico Solutions
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
* (C) Copyright 2016 by Mosaico Solutions
*
* Original Author: Bruno Xavier (for Mosaico Solutions);
*
* Contributor(s) -;
*
* Changes: -;
*
* 
* @author BrunoXavier
* @version 1.0
*/

package br.com.mosaicosolutions.parser;

import java.io.FileNotFoundException;
import java.io.FileReader;

public class Parser {

	public static void main(String... args) {
		Argument argument = new Argument(args);

		showHeader();

		try {
		   
			if(!argument.hasArgument())//se nenhum argumento for informado...
				initFromKeyboard();//inicia o analizador lendo a entrada do teclado.
			else
				initFromSourceFile(argument.getSourceFileName());//inicia o analizador a partir do arquivo.
				
		}catch (ParseException e) {
			 System.out.println("Parser: Encountered errors on parsing.");
			 e.printStackTrace();
			 
		}catch (TokenMgrError e) {
			 System.out.println("Parser: Encountered errors on parsing.");
			 e.printStackTrace();
		}catch (FileNotFoundException e) {
		  	System.out.println("Parser: Encountered errors on parsing.");
			e.printStackTrace();
		}
	}
	
	/**
	* Inicia a análise sintática a partir do telcado.
	*/
	private static void initFromKeyboard() throws ParseException {
		System.out.println("Parser: Reading from standard input... ");
	
		Parser parser = new Parser(System.in);
		parser.Start();

		System.out.println("Parser: Program parsed successfully.");
	}

	/**
	* Inicia a análise sintática a partir do arquivo contendo um
	* código fonte da linguagem EST.
	*/
	private static void initFromSourceFile(String fileName) throws ParseException, FileNotFoundException{
		System.out.println("iniciando com o arquivo fonte");

		Parser parser = new Parser(new FileReader(fileName));
		parser.Start();

		System.out.println("Parser: Program parsed successfully.");
	}

	/**
	* Exibe o cabeçalho do programa. 
	*/
	static void showHeader() {
	  	System.out.println();
		System.out.println("============================================================");
		System.out.println("Parser : A syntactic analyzer for a fictitious EST language.");
		System.out.println("============================================================");
		System.out.println(" (C) Copyright 2016 by Mosaico Solutions ");
		System.out.println();
	}
}
PARSER_END(Parser)

SKIP : { " " | "\n" | "\r" | "\r\n" | "\t" }
TOKEN : { < MAIS : "+" > }
TOKEN : { < MENOS : "-" > }
TOKEN : { < MULT : "*" > }
TOKEN : { < DIV : "/" > }
TOKEN : { < RESTO : "%" > }
TOKEN : { < REAL : "real" > }
TOKEN : { < INT : "integer" > }
TOKEN : { < DOISPONTOS : ":" > }
TOKEN : { < PROCEDURE : "procedure" > }
TOKEN : { < ABREPARENTESE : "(" > }
TOKEN : { < FECHAPARENTESE : ")" > }
TOKEN : { < IS : "is" > }
TOKEN : { < CODE : "code" > }
TOKEN : { < ENDCODE : "endcode" > }
TOKEN : { < VIRGULA : "," > }
TOKEN : { < PONTO : "." > }
TOKEN : { < PONTOVIRGULA : ";" > }
TOKEN : { < ATRIBUICAO : ":=" > }
TOKEN : { < #DIGITO : (["0"-"9"]) > }
TOKEN : { < #LETRA : (["a" - "z"] | ["A" - "Z"]) > }
TOKEN : { < IDENTIFICADOR : (<LETRA>|"_"|"$")(<LETRA>|<DIGITO>|"_"|"$")* > }
TOKEN : { < VALOR_INTEIRO : "0" | (["1" - "9"]) (<DIGITO>)* > }
TOKEN : { < VALOR_REAL : (< VALOR_INTEIRO >)?<PONTO><VALOR_INTEIRO> |< VALOR_INTEIRO ><PONTO> >}

void Start() :
{}
{
	  <PROCEDURE> <IDENTIFICADOR> <ABREPARENTESE> (Parametros())? <FECHAPARENTESE> <IS>
	  <CODE>
		(Chamadas())*
	  <ENDCODE>
	  <EOF>
}

void Chamadas() : 
{}
{
  LOOKAHEAD(Chamada()) Chamada() | ChamadaAtribuicao()
}

void Chamada() :
{}
{
  <IDENTIFICADOR> <ABREPARENTESE> (Argumentos())? <FECHAPARENTESE> <PONTOVIRGULA>
}

void ChamadaAtribuicao() : 
{}
{
  <IDENTIFICADOR> <ATRIBUICAO> Chamada()
}

void Argumento() :
{}
{
   LOOKAHEAD(Expressao()) Expressao() | <IDENTIFICADOR> | Valor() 
}

void Argumentos() : 
{}
{
  (Argumento())(<VIRGULA> Argumento())*
}

void Parametro() :
{}
{
  <IDENTIFICADOR> <DOISPONTOS> Tipo()
}

void Parametros() :
{}
{
  (Parametro())(< VIRGULA > Parametro())*
}

void Tipo() :
{}
{
	<REAL> | <INT>
}

void Operador() :
{}
{
  <MAIS> | <MENOS> | <MULT> | <DIV> | <RESTO>
}

void Expressao() :
{}
{
  ExpressaoPrimaria() (Operador() ExpressaoPrimaria())*
}

void ExpressaoPrimaria() : 
{}
{
  <IDENTIFICADOR> | Valor() | <ABREPARENTESE> Expressao() <FECHAPARENTESE>
}

void Valor() :
{}
{
  < VALOR_INTEIRO > | < VALOR_REAL >
}